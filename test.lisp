
(require 'drakma)
(require 'cl-html5-parser)
(require 'cl-ppcre)

(defun -get-bootstrap-json-as-string (in-string)
  "Extract value of bootstappedData from IN-STRING and return as string."
  (let* ((parsed (html5-parser:parse-html5 in-string :dom :xmls))
	 (head (nth 3 parsed))
	 (script (nth 3 head))
	 (code (nth 2 script)))
    (multiple-value-bind (result groups) (ppcre:scan-to-strings "[.\n]+" code :start 0 :end (length code))
      (format t "result: ~s~%" result)
      (format t "groups: ~s~%" groups)
      )
    nil
    )
)


(let* ((id "ybl045c")
       (base-url (format nil "http://www.yeastgenome.org/search?query=~a" id))
       (page (drakma:http-request base-url))
      ;; (page-parsed (chtml:parse page (chtml:make-lhtml-builder)))
       (json-string (-get-bootstrap-json-as-string page)))
  (format t "url request: ~s~%" base-url)
  ;;(format t "json-string: \"~a\"~%" json-string)
  ;;(format t "page type: ~s~%" (type-of page-parsed))
  ;;(format t "~s~%" page-parsed)
  ;; (stp:do-recursively (element page-parsed)
  ;;  (when (typep element 'stp:element)
  ;;   ;; (equal (stp:local-name body) "body"))
  ;;   ;;(format t "element: ~s~%" element)
  ;;   (let* ((string-element (stp:serialize element (cxml:make-string-sink)))
  ;; 	   (element-length (length string-element))
  ;; 	   (local-name (stp:local-name element)))
  ;;     (format t "local-name: ~s size: ~d ~%" local-name element-length)
  ;;     )
    
  ;;     ;;(format t "display element: ~%~a~%" (stp:serialize element (cxml:make-string-sink)))
  ;; ;;     (stp:do-recursively (child body)
  ;; ;; 	(if (typep child 'stp:element)
  ;; ;; 	    (format t "child ~a ~%" (stp:local-name child))
  ;; ;; 	    )
  ;; ;; 	)
  ;; ;;     ;; (let ((divs (stp:filter-recursively (stp:of-name "div" body) body)))
  ;; ;;     ;; 	(do ((i 0 (1+ 1)))
  ;; ;;     ;; 	    ((equal i (length divs)))
  ;; ;;     ;; 	       (format t "div with classes: ~s~%" (stp:attribute-value (nth i divs) "class"))
  ;; ;;     ;; 	    ))
  ;;     )
  ;; )
)


